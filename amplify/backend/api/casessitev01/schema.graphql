type Book
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete books
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view books
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  category: String!
  image: String
  quantity: Int
  featured: Boolean
  price: Float
  orders: [BookOrder] @connection(keyName: "byBook", fields: ["id"])
}

type BookOrder
  @model(subscriptions: null)
  @key(name: "byBook", fields: ["book_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "book_id"])
  @auth(
    rules: [
      # allow admins to create bookorders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  book_id: ID!
  order_id: ID!
  book: Book @connection(fields: ["book_id"])
  order: Order @connection(fields: ["order_id"])
}

type Product
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete books
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view books
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  image: String
  Secondimage: String
  Thirdimage: String
  featured: Boolean

  price: Float
  categories: [ProductType] @connection(keyName: "byProduct", fields: ["id"])
  orders: [ProductOrder] @connection(keyName: "byProduct", fields: ["id"])
}

type ProductType
  @model(subscriptions: null)
  @key(name: "byProduct", fields: ["product_id"])
  @auth(
    rules: [
      # allow admins to create, update and delete books
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view books
      { allow: public, operations: [read] }
    ]
  ) {
  product_id: ID!
  category: String!
  quantity: Int!
  product: Product @connection(fields: ["product_id"])
}

type ProductOrder
  @model(subscriptions: null)
  @key(name: "byProduct", fields: ["product_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "product_id"])
  @auth(
    rules: [
      # allow admins to create bookorders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  product_id: ID!
  order_id: ID!
  category: String!
  product: Product @connection(fields: ["product_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order
  @model(subscriptions: null)
  @auth(
    rules: [
      # only owner can see his orders
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      # allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Float
  products: [ProductOrder] @connection(keyName: "byOrder", fields: ["id"])
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
  category: String
  quantity: Int
  featured: Boolean
  ProdctTypeId: String!
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
  firstName: String!
  lastName: String!
  address: String!
  address2: String
  suburb: String!
  postcode: String!
  phoneNum: Int!
  DeliverDate: String
  PickUpDate: String
}

input TotalpriceInput {
  total: Float!
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "ProcessOrderPayment-${env}")
    @function(name: "CreateOrder-${env}")
    @function(name: "SendEmailToUser-prod")
    @function(name: "SendEmailToAdmin-prod")

  EmailChanges(input: ProcessOrderInput!): OrderStatus
    @function(name: "SendEmailToUser-prod")
}
